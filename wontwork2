import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from alpha_vantage.timeseries import TimeSeries
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense, LSTM
import datetime
import time

def av_wrapper(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        time.sleep(60)
        return result
    return wrapper

@av_wrapper
def get_stock_data(ticker, api_key):
    ts = TimeSeries(key=api_key, output_format='pandas')
    data, _ = ts.get_daily(symbol=ticker, outputsize='full')
    return data

api_key = 'GIABJWZQHDTVAHXM'
tickers = [
    "MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "GS", "HD",
    "IBM", "INTC", "JNJ", "JPM", "MCD", "MRK", "MSFT", "NKE", "PFE",
    "PG", "TRV", "UNH", "VZ", "V", "WMT", "WBA", "DIS", "DOW", "XOM", "CRM"
]

output = []

def process_data(data):
    data = data.iloc[::-1]
    scaler = MinMaxScaler(feature_range=(0, 1))
    data_scaled = scaler.fit_transform(data)
    return data_scaled, scaler

def split_data(data_scaled):
    training_data_len = int(np.ceil(len(data_scaled) * 0.8))

    train_data = data_scaled[0:int(training_data_len), :]
    test_data = data_scaled[int(training_data_len) - 60:, :]

    x_train, y_train, x_test, y_test = [], [], [], []

    for i in range(60, len(train_data)):
        x_train.append(train_data[i - 60:i, 0])
        y_train.append(train_data[i, 0])

    for i in range(60, len(test_data)):
        x_test.append(test_data[i - 60:i, 0])
        y_test.append(test_data[i, 0])

    x_train, y_train = np.array(x_train), np.array(y_train)
    x_test, y_test = np.array(x_test), np.array(y_test)

    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

    return x_train, y_train, x_test, y_test, training_data_len

def create_lstm_model():
    model = Sequential()
    model.add(LSTM(50, return_sequences=True, input_shape=(60, 1)))
    model.add(LSTM(50, return_sequences=False))
    model.add(Dense(25))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

def train_model(model, x_train, y_train):
    model.fit(x_train, y_train, batch_size=1, epochs=1)
    return model

def predict_and_evaluate(model, x_test, y_test, data, data_scaled, scaler, training_data_len):
    predictions = model.predict(x_test)
    predictions = scaler.inverse_transform(predictions)

    rmse_before = np.sqrt(np.mean(((y_test - predictions) ** 2)))
    rmse_after = np.sqrt(mean_squared_error(y_test, predictions))

    train_score = model.evaluate(x_train, y_train, verbose=0)
    test_score = model.evaluate(x_test, y_test, verbose=0)

    valid = data[training_data_len:]
    valid['Predictions'] = predictions.flatten()

    today = datetime.date.today()
    yesterday = today - datetime.timedelta(days=1)

    yesterday_open = data.loc[yesterday.strftime('%Y-%m-%d'), '1. open']
    yesterday_close = data.loc[yesterday.strftime('%Y-%m-%d'), '4. close']
    predicted_open = valid.loc[yesterday.strftime('%Y-%m-%d'), 'Predictions']

    next_day_data = np.append(data_scaled[-59:, 0], predicted_open)
    next_day_data = np.reshape(next_day_data, (1, 60, 1))

    predicted_close = model.predict(next_day_data)
    predicted_close = scaler.inverse_transform(predicted_close)

    suggestions = {
        "today": "",
        "7_days": "",
        "30_days": ""
    }

    if predicted_close > predicted_open:
        suggestions["today"] = "Buy"
    elif predicted_close < predicted_open:
        suggestions["today"] = "Sell"
    else:
        suggestions["today"] = "Hold"

    return rmse_before, rmse_after, train_score, test_score, predicted_open, predicted_close, yesterday_open, yesterday_close, suggestions

df_output = pd.DataFrame(columns=['Ticker', 'MSE_before', 'MSE_after', 'Train_Score', 'Test_Score', 'Predicted_Open', 'Predicted_Close', 'Yesterday_Open', 'Yesterday_Close', 'Suggestion_Today', 'Suggestion_7_days', 'Suggestion_30_days'])
def plot_predictions(ticker, data, train, valid):
    plt.figure(figsize=(16, 8))
    plt.title(f'{ticker} Model')
    plt.xlabel('Date', fontsize=18)
    plt.ylabel('Close Price USD ($)', fontsize=18)
    plt.plot(data['4. close'])
    plt.plot(train['4. close'])
    plt.plot(valid[['4. close', 'Predictions']])
    plt.legend(['Data', 'Train', 'Val', 'Predictions'], loc='lower right')
    plt.savefig(f"{ticker}_predictions.png")
    plt.close()

for ticker in tickers:
    print(f"Processing {ticker}")
    data = get_stock_data(ticker, api_key)
    data_scaled, scaler = process_data(data)
    x_train, y_train, x_test, y_test, training_data_len = split_data(data_scaled)
    model = create_lstm_model()
    model = train_model(model, x_train, y_train)
    result = predict_and_evaluate(model, x_test, y_test, data_scaled, scaler, training_data_len)
    
    df_output = df_output.append({
        'Ticker': ticker,
        'MSE_before': result[0],
        'MSE_after': result[1],
        'Train_Score': result[2],
        'Test_Score': result[3],
        'Predicted_Open': result[4],
        'Predicted_Close': result[5],
        'Yesterday_Open': result[6],
        'Yesterday_Close': result[7],
        'Suggestion_Today': result[8]['today'],
        'Suggestion_7_days': result[8]['7_days'],
        'Suggestion_30_days': result[8]['30_days']
    }, ignore_index=True)

    train_data = data[:training_data_len]
    valid_data = data[training_data_len:]
    valid_data['Predictions'] = result[5]
    plot_predictions(ticker, data, train_data, valid_data)

df_output.to_csv('predictions.csv', index=False)
print("Predictions saved to 'predictions.csv'")

df_output.to_csv('predictions.csv', index=False)
print("Predictions saved to 'predictions.csv'")

   
